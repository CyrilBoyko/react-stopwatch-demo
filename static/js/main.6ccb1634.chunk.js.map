{"version":3,"sources":["hook/useTimer.js","utils/index.js","components/Timer.js","components/Info.js","App.js","reportWebVitals.js","index.js"],"names":["useTimer","initialState","useState","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","useRef","handleStart","current","setInterval","counter","wait","setTimeout","handleWait","clearInterval","handleStop","handleReset","formatTime","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","Timer","className","onClick","Info","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAwDeA,EAtDE,WAAuB,IAAtBC,EAAqB,uDAAN,EAAM,EACTC,mBAASD,GADA,mBAC5BE,EAD4B,KACrBC,EADqB,OAEHF,oBAAS,GAFN,mBAE5BG,EAF4B,KAElBC,EAFkB,OAGHJ,oBAAS,GAHN,mBAG5BK,EAH4B,KAGlBC,EAHkB,KAI7BC,EAAWC,iBAAO,MAElBC,EAAc,WAChBL,GAAY,GACZE,GAAY,GACZC,EAASG,QAAUC,aAAY,WAC3BT,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC7B,MAGHW,EAAU,EAERC,EAAO,WAEO,MADhBD,GAEIE,YAAW,WACPC,MACD,MAGX,SAASA,IACW,IAAZH,GACAI,cAAcT,EAASG,SAC3BJ,GAAY,GACI,IAAZM,GACAN,GAAY,GAGpB,IAAMW,EAAa,WACfD,cAAcT,EAASG,SACvBN,GAAY,GACZE,GAAY,GACZJ,EAAS,IAGPgB,EAAc,WAChBhB,EAAS,IAGb,MAAO,CACHD,QACAE,WACAE,WACAI,cACAQ,aACAC,cACAL,SCpDKM,EAAa,SAAClB,GACvB,IAAMmB,EAAa,WAAKnB,EAAQ,IAAMoB,OAAO,GACvCC,EAAO,UAAMC,KAAKC,MAAMvB,EAAQ,KAChCwB,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAMvB,EAAQ,OAAQoB,OAAO,GACvD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,ICqB7BO,EArBD,WAAO,IAAD,EACgE7B,EAAS,GAAlFG,EADS,EACTA,MAAOE,EADE,EACFA,SAAUE,EADR,EACQA,SAAUI,EADlB,EACkBA,YAAaQ,EAD/B,EAC+BA,WAAYC,EAD3C,EAC2CA,YAAaL,EADxD,EACwDA,KACxE,OACI,sBAAKe,UAAU,QAAf,UACI,iDACA,sBAAKA,UAAU,iBAAf,UACI,4BAAIT,EAAWlB,KACf,sBAAK2B,UAAU,UAAf,UAESzB,GAAaE,EAER,wBAAQwB,QAASZ,EAAjB,kBADF,wBAAQY,QAASpB,EAAjB,mBAGR,wBAAQoB,QAAShB,EAAjB,kBACA,wBAAQgB,QAASX,EAAjB,6BCJLY,EAbF,WACT,OACI,qBAAKF,UAAU,OAAf,qhBCSOG,MATf,WACI,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,QCIGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.6ccb1634.chunk.js","sourcesContent":["import {useState, useRef} from 'react';\n\nconst useTimer = (initialState = 0) => {\n    const [timer, setTimer] = useState(initialState)\n    const [isActive, setIsActive] = useState(false)\n    const [isPaused, setIsPaused] = useState(false)\n    const countRef = useRef(null)\n\n    const handleStart = () => {\n        setIsActive(true)\n        setIsPaused(true)\n        countRef.current = setInterval(() => {\n            setTimer((timer) => timer + 1)\n        }, 1000)\n    }\n\n    let counter = 0;\n\n    const wait = () => {\n        counter++;\n        if (counter === 1)\n            setTimeout(() => {\n                handleWait()\n            }, 300)\n    }\n\n    function handleWait() {\n        if (counter === 2)\n            clearInterval(countRef.current)\n        setIsPaused(false)\n        if (counter === 1)\n            setIsPaused(true)\n    }\n\n    const handleStop = () => {\n        clearInterval(countRef.current)\n        setIsActive(false)\n        setIsPaused(false)\n        setTimer(0)\n    }\n\n    const handleReset = () => {\n        setTimer(0)\n    }\n\n    return {\n        timer,\n        isActive,\n        isPaused,\n        handleStart,\n        handleStop,\n        handleReset,\n        wait\n    }\n}\n\nexport default useTimer;","export const formatTime = (timer) => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n}","import React from 'react';\nimport useTimer from '../hook/useTimer';\nimport {formatTime} from '../utils';\nimport '../App.css'\n\nconst Timer = () => {\n    const {timer, isActive, isPaused, handleStart, handleStop, handleReset, wait} = useTimer(0)\n    return (\n        <div className='timer'>\n            <h3>React Stopwatch</h3>\n            <div className='stopwatch-card'>\n                <p>{formatTime(timer)}</p>\n                <div className='buttons'>\n                    {\n                        !isActive || !isPaused ?\n                            <button onClick={handleStart}>Start</button>\n                            : <button onClick={handleStop}>Stop</button>\n                    }\n                    <button onClick={wait}>Wait</button>\n                    <button onClick={handleReset}>Reset</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Timer;","import \"../App.css\"\n\nconst Info = () => {\n    return(\n        <div className='info'>\n            Hello, this is my React stopwatch.\n            To start counting, press the Start button and the Start button changes to a Stop button.\n            If you press the Stop button, the counter will stop and reset to zero.\n            To pause the counter, you need to press the wait button twice (but rather quickly, no more than 300 ms between clicks).\n            If you press the reset button while the stopwatch is running, it will not stop the counter, but will set the time to 00:00:00, but if the counter is stopped, it will simply reset to zero.\n            Enjoy your use.\n        </div>\n    )\n}\n\nexport default Info;","import './App.css';\nimport Timer from \"./components/Timer\";\nimport Info from \"./components/Info\";\n\nfunction App() {\n    return (\n        <div>\n            <Timer />\n            <Info />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}